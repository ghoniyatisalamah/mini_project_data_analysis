# -*- coding: utf-8 -*-
"""Mini Project Homework RTC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l2YaUxumOjDf0wA1y41SRR2j5himEPtz

Author: Ghoniyati Salamah

# Import Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load Dataset"""

df = pd.read_csv('/content/sample_data/loan_customer.csv')

df.head(10)

df.info()

"""NOTE :

Ada kesalahan tipe data pada kolom `birth_date` (seharusnya bertipe datetime), `phone_number` (harusnya bertipe string), dan `credit_history`(harusnya bertipe string).

# Data Cleansing
"""

df.describe(include='all')

"""## Handling missing values"""

df.isna().sum()

df_drop_unused_columns = df.drop(['birth_date','phone_number','self_employed','credit_history','has_credit_card'], axis=1)
df_drop_unused_columns.head()

"""Kolom `birth_date`, `phone_number`, `self_employed`, `credit_history`, `has_credit_card` akan dihapus dari dataset karena dalam hal ini data-data tersebut tidak berpengaruh signifikan terhadap tujuan analisis dan memiliki missing value yang banyak. Walaupun mungkin di kasus nyata hal tersebut jarang terjadi, perlu cara lain untuk meng-handling missing value yaitu dengan meninjau ulang mengapa di kolom tersebut bisa banyak data yang hilang."""

df_drop_unused_columns.isna().sum()

"""Selanjutnya, untuk beberapa missing value di atas akan di drop dari dataset dengan kode berikut:"""

df_cleaned = df_drop_unused_columns.dropna()

df_cleaned.info()

"""Dapat dilihat bahwa pada dataset tersebut sudah tidak ada missing value dengan banyaknya data sebanyak 584 dengan 12 kolom.

# Handling duplicated data
"""

df_cleaned.duplicated().sum()

"""Terdapat 5 data duplikat pada dataset. Selanjutnya, data duplikat akan dihapus dengan kode berikut:"""

df_cleaned.drop_duplicates(inplace=True)

df_cleaned.duplicated().sum()

"""## Handling Outlier

1. Kolom applicant_income
"""

sns.boxplot(df_cleaned['applicant_income'], palette="gist_rainbow")
plt.show()

Q1_applicant = df_cleaned['applicant_income'].quantile(0.25)
Q3_applicant = df_cleaned['applicant_income'].quantile(0.75)
IQR_applicant = Q3_applicant - Q1_applicant

# Batas atas dan batas bawah
lower_bound_applicant = Q1_applicant - 1.5 * IQR_applicant
upper_bound_applicant = Q3_applicant + 1.5 * IQR_applicant

# Identifikasi dan tangani outliers
outliers_applicant = df_cleaned[(df_cleaned['applicant_income'] < lower_bound_applicant) | (df_cleaned['applicant_income'] > upper_bound_applicant)]

total_outliers_applicant = outliers_applicant['applicant_income'].count()
print(total_outliers_applicant)

"""Dapat dilihat bahwa terdapat 47 outlier pada kolom `applicant_income`. Selanjutnya akan nilai outlier akan diganti dengan lower_bound atau upper_bound dengan kode seperti berikut:"""

df_cleaned['applicant_income'].clip(lower=lower_bound_applicant, upper=upper_bound_applicant, inplace=True)

sns.boxplot(df_cleaned['applicant_income'], palette="turbo")
plt.show()

"""Dapat dilihat bahwa sudah tidak ada outlier pada kolom `applicant_income`.

2. Kolom coapplicant_income
"""

sns.boxplot(df_cleaned['coapplicant_income'], palette="turbo")
plt.show()

Q1_coapplicant = df_cleaned['coapplicant_income'].quantile(0.25)
Q3_coapplicant = df_cleaned['coapplicant_income'].quantile(0.75)
IQR_coapplicant = Q3_coapplicant - Q1_coapplicant

# Batas atas dan batas bawah
lower_bound_coapplicant = Q1_coapplicant - 1.5 * IQR_coapplicant
upper_bound_coapplicant = Q3_coapplicant + 1.5 * IQR_coapplicant

# Identifikasi dan tangani outliers
outliers_coapplicant = df_cleaned[(df_cleaned['coapplicant_income'] < lower_bound_coapplicant) | (df_cleaned['coapplicant_income'] > upper_bound_coapplicant)]

total_outliers_coapplicant = outliers_coapplicant['coapplicant_income'].count()
print(total_outliers_coapplicant)

"""Dapat dilihat bahwa terdapat 15 outlier pada kolom coapplicant_income. Selanjutnya akan nilai outlier akan diganti dengan lower_bound atau upper_bound dengan kode seperti berikut:"""

df_cleaned['coapplicant_income'].clip(lower=lower_bound_coapplicant, upper=upper_bound_coapplicant, inplace=True)

sns.boxplot(df_cleaned['coapplicant_income'], palette="turbo")
plt.show()

"""Dapat dilihat bahwa sudah tidak ada outlier pada kolom `coapplicant_income`.

3. Kolom loan_amount
"""

sns.boxplot(df_cleaned['loan_amount'], palette="turbo")
plt.show()

Q1_loan_amount = df_cleaned['loan_amount'].quantile(0.25)
Q3_loan_amount = df_cleaned['loan_amount'].quantile(0.75)
IQR_loan_amount = Q3_loan_amount - Q1_loan_amount

# Batas atas dan batas bawah
lower_bound_loan_amount = Q1_loan_amount - 1.5 * IQR_loan_amount
upper_bound_loan_amount = Q3_loan_amount + 1.5 * IQR_loan_amount

# Identifikasi dan tangani outliers
outliers_loan_amount = df_cleaned[(df_cleaned['loan_amount'] < lower_bound_loan_amount) | (df_cleaned['loan_amount'] > upper_bound_loan_amount)]

total_outliers_loan_amount = outliers_loan_amount['loan_amount'].count()
print(total_outliers_loan_amount)

"""Dapat dilihat bahwa terdapat 15 outlier pada kolom `loan_amount`. Selanjutnya akan nilai outlier akan diganti dengan lower_bound atau upper_bound dengan kode seperti berikut:"""

df_cleaned['loan_amount'].clip(lower=lower_bound_loan_amount, upper=upper_bound_loan_amount, inplace=True)

sns.boxplot(df_cleaned['loan_amount'], palette="turbo")
plt.show()

"""## Feature Encoding"""

one_hot_enc = pd.get_dummies(df_cleaned, columns=['gender', 'married', 'education', 'property_type', 'loan_status'], prefix=['gender', 'married', 'education', 'property_type', 'loan_status'])
one_hot_enc.head()

all_df = pd.merge(
    left=df_cleaned,
    right=one_hot_enc,
    how="inner",
    left_on="loan_id",
    right_on="loan_id"
)
all_df.head()

"""# Business Insight

## Analisis minat pelanggan berdasarkan pada tipe properti
"""

gender_property_loan_df = df_cleaned.groupby(by=["gender","property_type"], as_index=False).agg({
    "loan_id" : "nunique"
})
gender_property_loan_df.rename(columns={
    "loan_id": "loan_customer_count"
}, inplace=True)
gender_property_loan_df.head(6)

ax = sns.barplot(data=gender_property_loan_df.sort_values(by="loan_customer_count", ascending=False), x="loan_customer_count", y="gender", hue="property_type", errorbar=None, palette="turbo")
plt.title('Analisis Minat Pelanggan Berdasarkan Pada Tipe Properti', size=15)

for p in ax.patches:
    width = p.get_width()
    plt.text(width - 2, p.get_y() + p.get_height() / 2, f'{int(width)}', ha="right", color="black")

plt.legend()
plt.show()

"""Berdasarkan visualisasi di atas, dapat dilihat bahwa pelanggan paling banyak menjaminkan properti tipe apartemen untuk melakukan pinjaman dibandingkan dengan jenis properti lainnya, baik untuk pelanggan laki-laki (Male) maupun pelanggan perempuan (Female).

## Analisis pengaruh status perkawinan terhadap jangka waktu meminjam
"""

married_loan_df = df_cleaned.groupby(["loan_term_year", "married"])['loan_id'].count().reset_index()
married_loan_df.rename(columns={
    "loan_id": "loan_customer_count"
}, inplace=True)

married_loan_df.head(20)

ax = sns.barplot(data=married_loan_df.sort_values(by="loan_customer_count", ascending=False), x="loan_term_year", y="loan_customer_count", hue="married", errorbar=None, palette="turbo")
plt.title('Analisis Pengaruh Status Perkawinan Terhadap Jangka Waktu Meminjam', size=15)
plt.legend()
plt.show()

"""Dapat dilihat bahwa dari keseluruhan pelanggan yang mengajukan pinjaman, jangka waktu pinjaman yang paling banyak diajukan adalah 30 tahun. Dari 497 pelanggan yang meminjam selama 30 tahun, 317 diantaranya sudah menikah."""